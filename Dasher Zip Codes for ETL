WITH DASHERS AS ( 
SELECT DISTINCT
DASHER_ID, 
 USER_ID,
 ROW_NUMBER() OVER (PARTITION BY DASHER_ID ORDER BY CREATED_AT DESC ) AS LAST_ID
 FROM PRODDB.PUBLIC.DIMENSION_DASHER
 WHERE DASHER_ID IS NOT NULL
 QUALIFY LAST_ID = 1),
 
DASHERS_INFO AS (
SELECT DISTINCT
CONSUMER_ID,
DASHER_ID,
USER_ID,
EMAIL,
DATE_JOINED ,
ROW_NUMBER() OVER (PARTITION BY DASHER_ID ORDER BY DATE_JOINED DESC ) AS DUP_ROW_ELIMINATION --to deal with more than one row for a dasher id
FROM  DIMENSION_USERS 
--WHERE A.DASHER_APPLICANT_ID IN (SELECT DISTINCT(DASHER_APPLICANT_ID) FROM DASHERS)
WHERE  EMAIL NOT LIKE  '%doordash.com' -- employees
AND EMAIL NOT LIKE'%crometrics.com' -- test emails
AND EMAIL NOT LIKE '%ext.dashcorps.com' -- courier emails
AND EMAIL NOT LIKE '%dashcorps.com'
AND DASHER_ID IN (SELECT DISTINCT(DASHER_ID) FROM DASHERS)
QUALIFY DUP_ROW_ELIMINATION = 1 ) ,

ZIP_CODES AS (
SELECT CONSUMER_ID, ZIP_CODE FROM dimension_crm_consumer_geo
WHERE CONSUMER_ID IN (SELECT DISTINCT(CONSUMER_ID) FROM DASHERS_INFO))

SELECT DISTINCT(TRIM(EMAIL)) AS EMAIL,
CASE WHEN ZIP_CODE !='' THEN ZIP_CODE ELSE APPLIED_ZIP_CODE END AS ZIP_CODE--Using Applied Zip Code from Dasher Applicant Tble to deal with Null Values.
FROM DASHERS_INFO  D
LEFT JOIN  ZIP_CODES Z ON D.CONSUMER_ID = Z.CONSUMER_ID
LEFT JOIN PRODDB.PUBLIC.DIMENSION_DASHER_APPLICANT A ON D.DASHER_ID = A.DASHER_ID  
--WHERE ZIP_CODE  !=''. 
